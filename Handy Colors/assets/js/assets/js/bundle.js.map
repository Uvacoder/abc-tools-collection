{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/full-palette.ts","src/js/index.ts","src/js/nav.ts","src/js/palette-constructor.ts","src/js/palettes.ts","src/js/tabs.ts","src/js/tray.ts"],"names":[],"mappings":"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","file":"../../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { IFullPaletteParams } from './interfaces';\n\nenum CLASSNAME {\n  COLOR = 'full-palette-color',\n  COLOR_SELECTED = 'full-palette-color--selected',\n  COLOR_CURRENT = 'full-palette-color--current',\n  VIEW = 'full-palette-color__view',\n  VIEW_SELECTED = 'full-palette-color__view--selected',\n  CONTROLS = 'view-controls',\n  CONTROL = 'view-controls__control',\n  CONTROL_CURRENT = 'view-controls__control--current',\n  COLORS = 'full-palette__colors',\n  COLORS_TILES = 'full-palette__colors--tiles'\n}\n\nexport default class FullPalette {\n  _element: HTMLElement;\n  _colorClickHandler: (color: string) => void;\n  _currentColorElement: HTMLElement;\n  _viewControlsElement: HTMLElement;\n  _currentViewControl: HTMLElement;\n  _colorsElement: HTMLElement;\n\n  constructor ({ element, colorClickHandler }: IFullPaletteParams) {\n    this._element = element;\n    this._colorClickHandler = colorClickHandler;\n    this._colorsElement = this._element.querySelector(`.${CLASSNAME.COLORS}`);\n    this._viewControlsElement = this._element.querySelector(`.${CLASSNAME.CONTROLS}`);\n    this._currentViewControl = this._viewControlsElement.querySelector(`.${CLASSNAME.CONTROL_CURRENT}`);\n\n    this._element.addEventListener('click', (event) => {\n      const colorControl: HTMLButtonElement = (<HTMLElement>event.target).closest(`.${CLASSNAME.COLOR}`);\n\n      if (!colorControl) {\n        return;\n      }\n\n      this._colorClickHandler(colorControl.value);\n    });\n\n    this._viewControlsElement.addEventListener('click', (event) => {\n      const viewControl: HTMLButtonElement = (<HTMLElement>event.target).closest(`.${CLASSNAME.CONTROL}`);\n\n      if (!viewControl) {\n        return;\n      }\n\n      this._currentViewControl.classList.remove(CLASSNAME.CONTROL_CURRENT);\n      if (viewControl.value === 'tiles') {\n        this._colorsElement.classList.add(CLASSNAME.COLORS_TILES);\n      } else {\n        this._colorsElement.classList.remove(CLASSNAME.COLORS_TILES);\n      }\n\n      this._currentViewControl = viewControl;\n      this._currentViewControl.classList.add(CLASSNAME.CONTROL_CURRENT);\n    });\n  }\n\n  selectColor (color: string): void {\n    const colorControl = this._element.querySelector(`#color-${color}`);\n    colorControl.classList.add(CLASSNAME.COLOR_SELECTED);\n  }\n\n  unselectColor (color: string): void {\n    const colorControl = this._element.querySelector(`#color-${color}`);\n    colorControl.classList.remove(CLASSNAME.COLOR_SELECTED);\n    this._currentColorElement.classList.remove(CLASSNAME.COLOR_CURRENT);\n  }\n\n  setCurrentColor (color: string): void {\n    if (this._currentColorElement) {\n      this._currentColorElement.classList.remove(CLASSNAME.COLOR_CURRENT);\n    }\n\n    if (!color) {\n      return;\n    }\n\n    this._currentColorElement = this._element.querySelector(`#color-${color}`);\n    this._currentColorElement.classList.add(CLASSNAME.COLOR_CURRENT);\n  }\n}\n","import Nav from './nav';\nimport Tabs from './tabs';\nimport { addPalettesActions } from './palettes';\nimport { initPaletteConstructor } from './palette-constructor';\n\ndocument.body.classList.remove('no-js');\n\nconst navElement: HTMLElement = document.querySelector('.nav');\nconst mainElement: HTMLElement = document.querySelector('.main');\nconst palettesElement: HTMLElement = document.querySelector('.palettes');\nconst fullPaletteElement: HTMLElement = document.querySelector('.full-palette');\nconst createPaletteElement: HTMLElement = document.querySelector('.tray');\n\nconst currentSectionId = document.location.hash\n  ? document.location.hash.substr(1)\n  : 'full-palette';\n\nconst tabs = new Tabs({ element: mainElement });\nconst nav = new Nav({\n  element: navElement,\n  setCurrentTab: tabs.setCurrent\n});\n\ninitPaletteConstructor({\n  fullPaletteElement,\n  createPaletteElement\n});\n\naddPalettesActions({ element: palettesElement });\n\nnav.setCurrent(currentSectionId);\ntabs.setCurrent(currentSectionId);\n","import { INav } from './interfaces';\n\nenum CLASSNAME {\n  ITEM = 'nav__item',\n  CURRENT = 'nav__item--current'\n}\n\nexport default class Nav {\n  _element: HTMLElement;\n  _current: HTMLElement;\n  _items: Record<string, HTMLElement>\n  _setCurrentTab: (id: string) => void;\n\n  constructor ({ element, setCurrentTab }: INav) {\n    this._element = element;\n    this._items = this._getItems();\n    this._current = null;\n    this._setCurrentTab = setCurrentTab;\n\n    this.setCurrent = this.setCurrent.bind(this);\n\n    this._addEvents();\n  }\n\n  _addEvents (): void {\n    this._element.addEventListener('click', (event) => {\n      event.preventDefault();\n      const dataset = (<HTMLElement>event.target).dataset;\n\n      if (!dataset || !dataset.target) {\n        return;\n      }\n\n      this.setCurrent(dataset.target);\n      this._setCurrentTab(dataset.target);\n    });\n  }\n\n  setCurrent (id: string): void {\n    if (this._current) {\n      this._current.classList.remove(CLASSNAME.CURRENT);\n    }\n\n    this._current = <HTMLElement>(this._items[id]);\n    this._current.classList.add(CLASSNAME.CURRENT);\n\n    history.pushState(null, null, `#${id}`);\n  }\n\n  _getItems (): Record<string, HTMLElement> {\n    const items = Array.from(this._element.querySelectorAll(`.${CLASSNAME.ITEM}`));\n\n    return items.reduce((prev: Record<string, HTMLElement>, item: HTMLElement) => {\n      const dataset = item.dataset;\n\n      if (!dataset || !dataset.target) {\n        return prev;\n      }\n\n      const target = dataset.target;\n\n      prev[target] = item;\n\n      return prev;\n    }, {});\n  }\n}\n","import { IPaletteContructor, IFullPalette, ITray } from './interfaces';\nimport FullPalette from './full-palette';\nimport Tray from './tray';\n\nconst MAX_COLORS = 5;\n\nexport const initPaletteConstructor = ({ fullPaletteElement, createPaletteElement }: IPaletteContructor):void => {\n  const tray: ITray = new Tray({\n    element: createPaletteElement,\n    removeColor,\n    setPosition\n  });\n\n  const fullPalette: IFullPalette = new FullPalette({\n    element: fullPaletteElement,\n    colorClickHandler: toggleColor\n  });\n\n  const colors: Array<string> = [];\n  let currentPosition = 0;\n\n  // If no clicks on colors => position not changed manually\n  // If all colors was cleared & pos is 0\n  let isSequential = true;\n\n  function toggleColor (color: string): void {\n    const currentPosColor = getCurrentColor();\n\n    if (currentPosColor === color) {\n      removeColor(currentPosition);\n      tray.removeColorFromTray(currentPosition);\n      return;\n    }\n\n    addColor(color);\n\n    setNextCell();\n\n    fullPalette.setCurrentColor(getCurrentColor());\n  }\n\n  function setNextCell (): void {\n    if (isSequential) {\n      if (currentPosition < MAX_COLORS - 1) {\n        currentPosition++;\n        tray.setCurrent(currentPosition);\n      } else {\n        isSequential = false;\n      }\n    }\n  }\n\n  function setPosition (position: number): void {\n    if (typeof position !== 'number') {\n      return;\n    }\n\n    currentPosition = position;\n    fullPalette.setCurrentColor(getCurrentColor());\n\n    const existedColors = getExistedColors();\n\n    if (existedColors.length === 0 && currentPosition === 0) {\n      isSequential = true;\n    } else {\n      isSequential = false;\n    }\n  }\n\n  function addColor (color: string): void {\n    const currentColorOnPos = getCurrentColor();\n    colors[currentPosition] = color;\n\n    const isNeedUnselectColorOnPos = currentColorOnPos\n      && currentColorOnPos !== color\n      && !colors.includes(currentColorOnPos);\n\n    if (isNeedUnselectColorOnPos) {\n      // Override existed color & unselect it\n      fullPalette.unselectColor(currentColorOnPos);\n    }\n\n    tray.addColorToTray({\n      color,\n      position: currentPosition\n    });\n    fullPalette.selectColor(color);\n\n    tray.setTrayOutput(getExistedColors());\n  }\n\n  function removeColor (position: number): void {\n    const color = colors[position];\n    colors[position] = '';\n\n    if (!colors.includes(color)) {\n      fullPalette.unselectColor(color);\n    }\n\n    const existedColors = getExistedColors();\n    if (existedColors.length === 0) {\n      isSequential = true;\n    }\n\n    tray.setTrayOutput(existedColors);\n    fullPalette.setCurrentColor(getCurrentColor());\n  }\n\n  function getExistedColors (): Array<string> {\n    return colors.filter(item => item);\n  }\n\n  function getCurrentColor (): string {\n    return colors[currentPosition];\n  }\n};\n","import { IPalettes } from './interfaces';\n\nenum CLASSNAME {\n  ITEM = 'tiny-palette',\n  CURRENT = 'tiny-palette--current'\n}\n\nexport const addPalettesActions = ({ element }: IPalettes): void => {\n  let current: HTMLElement = null;\n\n  element.addEventListener('click', (event) => {\n    const palette = (<HTMLElement>event.target).closest(`.${CLASSNAME.ITEM}`);\n\n    if (!palette || palette.classList.contains(CLASSNAME.CURRENT)) {\n      return;\n    }\n\n    if (current) {\n      current.classList.remove(CLASSNAME.CURRENT);\n    }\n\n    current = <HTMLElement>palette;\n    current.classList.add(CLASSNAME.CURRENT);\n  });\n};\n","import { ITabs } from './interfaces';\n\nenum CLASSNAME {\n  ITEM = 'section',\n  CURRENT = 'section--current'\n}\n\nexport default class Tabs {\n  _element: HTMLElement;\n  _items: Record<string, HTMLElement>;\n  _current: HTMLElement;\n\n  constructor ({ element }: ITabs) {\n    this._element = element;\n    this._items = this._getItems();\n    this._current = null;\n\n    this.setCurrent = this.setCurrent.bind(this);\n  }\n\n  _getItems (): Record<string, HTMLElement> {\n    const items = Array.from(this._element.querySelectorAll(`.${CLASSNAME.ITEM}[id]`));\n\n    return items.reduce((prev: Record<string, HTMLElement>, item: HTMLElement) => {\n      prev[item.id] = item;\n\n      return prev;\n    }, {});\n  }\n\n  setCurrent (id: string):void {\n    if (!this._items[id]) {\n      return;\n    }\n\n    if (this._current) {\n      this._current.classList.remove(CLASSNAME.CURRENT);\n    }\n\n    this._current = this._items[id];\n    this._current.classList.add(CLASSNAME.CURRENT);\n  }\n}\n","import { ITrayParams, ISetColor } from './interfaces';\n\nenum CLASSNAMES {\n  ITEM = 'tray__color',\n  CURRENT = 'tray__color--current',\n  FILLED = 'tray__color--filled',\n  OUTPUT = 'tray__output'\n}\n\nexport default class Tray {\n  _element: HTMLElement;\n  _currentElement: HTMLElement;\n  _outputElement: HTMLTextAreaElement;\n  _items: NodeListOf<HTMLElement>;\n  _colorClickHandler: (color: string) => void;\n  _setPosition: (position: number) => void;\n  _removeColor: (position: number) => void;\n\n  constructor ({ element, setPosition, removeColor }: ITrayParams) {\n    this._element = element;\n    this._setPosition = setPosition;\n    this._removeColor = removeColor;\n    this._currentElement = null;\n    this._items = this._element.querySelectorAll(`.${CLASSNAMES.ITEM}`);\n    this._outputElement = this._element.querySelector(`.${CLASSNAMES.OUTPUT}`);\n\n    this.setCurrent(0);\n\n    this._element.addEventListener('click', (event) => {\n      const colorControl: HTMLElement = (<HTMLElement>event.target).closest(`.${CLASSNAMES.ITEM}`);\n\n      if (!colorControl || !colorControl.dataset || !colorControl.dataset.pos) {\n        return;\n      }\n\n      const position = +colorControl.dataset.pos;\n      const color = colorControl.dataset.color;\n\n      if (this._currentElement === colorControl && color) {\n        this.removeColorFromTray(position);\n        this._removeColor(position);\n        return;\n      }\n\n      this.setCurrent(position);\n      this._setPosition(position);\n    });\n  }\n\n  setCurrent (position: number):void {\n    if (this._currentElement) {\n      this._currentElement.classList.remove(CLASSNAMES.CURRENT);\n    }\n\n    this._currentElement = this._items[position];\n    this._currentElement.classList.add(CLASSNAMES.CURRENT);\n  }\n\n  addColorToTray ({ color, position }: ISetColor): void {\n    const element = <HTMLElement> this._items[position];\n    element.style.background = color;\n    element.dataset.color = color;\n    this._currentElement.classList.add(CLASSNAMES.FILLED);\n  }\n\n  removeColorFromTray (position: number): void {\n    const element = <HTMLElement> this._items[position];\n    element.style.background = 'transparent';\n    element.classList.remove(CLASSNAMES.FILLED);\n    element.dataset.color = '';\n  }\n\n  setTrayOutput (colors: Array<string>): void {\n    this._outputElement.value = colors.join(', ');\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
